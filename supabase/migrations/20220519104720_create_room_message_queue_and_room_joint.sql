-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.room_joint
(
    room_id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT room_joint_pkey PRIMARY KEY (room_id, user_id),
    CONSTRAINT room_joint_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT room_joint_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS public.room_joint
    OWNER to postgres;

ALTER TABLE IF EXISTS public.room_joint
    ENABLE ROW LEVEL SECURITY;

COMMIT;

CREATE TABLE IF NOT EXISTS public.room_message_queue
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    room uuid NOT NULL,
    message json NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT room_message_queue_pkey PRIMARY KEY (id, room),
    CONSTRAINT room_message_queue_room_fkey FOREIGN KEY (room)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS public.room_message_queue
    OWNER to postgres;

ALTER TABLE IF EXISTS public.room_message_queue
    ENABLE ROW LEVEL SECURITY;

COMMIT;

GRANT ALL ON TABLE public.room_joint TO anon;

GRANT ALL ON TABLE public.room_joint TO authenticated;

GRANT ALL ON TABLE public.room_joint TO postgres;

GRANT ALL ON TABLE public.room_joint TO service_role;

CREATE POLICY "Users can delete thrie own relationship with room"
    ON public.room_joint
    AS PERMISSIVE
    FOR DELETE
    TO authenticated
    USING ((auth.uid() = user_id));
CREATE POLICY "Users can insert their own joint"
    ON public.room_joint
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can see the room they join"
    ON public.room_joint
    AS PERMISSIVE
    FOR SELECT
    TO authenticated
    USING ((auth.uid() = user_id));
CREATE POLICY "Users could not update relationship."
    ON public.room_joint
    AS PERMISSIVE
    FOR UPDATE
    TO authenticated
    USING (false);

GRANT ALL ON TABLE public.room_message_queue TO anon;

GRANT ALL ON TABLE public.room_message_queue TO authenticated;

GRANT ALL ON TABLE public.room_message_queue TO postgres;

GRANT ALL ON TABLE public.room_message_queue TO service_role;

CREATE POLICY "Messages could not be updated"
    ON public.room_message_queue
    AS PERMISSIVE
    FOR UPDATE
    TO anon, authenticated
    USING (false);

CREATE POLICY "Messages could only be deleted by the owner"
    ON public.room_message_queue
    AS PERMISSIVE
    FOR DELETE
    TO authenticated
    USING ((EXISTS ( SELECT rooms.id,
    rooms.owner,
    rooms.name,
    rooms.created_at
   FROM rooms
  WHERE ((rooms.owner = auth.uid()) AND (rooms.id = room_message_queue.room)))));

CREATE POLICY "Users can listen to the rooms they join"
    ON public.room_message_queue
    AS PERMISSIVE
    FOR SELECT
    TO authenticated
    USING ((EXISTS ( SELECT room_joint.room_id,
    room_joint.user_id,
    room_joint.created_at
   FROM room_joint
  WHERE ((room_joint.user_id = auth.uid()) AND (room_joint.room_id = room_message_queue.room)))));

CREATE POLICY "Users can only push message to room they join"
    ON public.room_message_queue
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK ((EXISTS ( SELECT room_joint.room_id,
    room_joint.user_id,
    room_joint.created_at
   FROM room_joint
  WHERE ((room_joint.room_id = room_message_queue.room) AND (room_joint.user_id = auth.uid())))));

DROP POLICY IF EXISTS "users can see and operate rooms they own" ON public.rooms;

CREATE POLICY "Users can create room they own"
    ON public.rooms
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK ((owner = auth.uid()));


CREATE POLICY "Users can only delete rooms they own"
    ON public.rooms
    AS PERMISSIVE
    FOR DELETE
    TO authenticated
    USING ((auth.uid() = owner));

CREATE POLICY "Users can only update rooms they own"
    ON public.rooms
    AS PERMISSIVE
    FOR UPDATE
    TO authenticated
    USING ((auth.uid() = owner))
    WITH CHECK ((auth.uid() = owner));

CREATE POLICY "Users can see the room they own or joint"
    ON public.rooms
    AS PERMISSIVE
    FOR SELECT
    TO authenticated
    USING (((owner = auth.uid()) OR (EXISTS ( SELECT room_joint.room_id,
    room_joint.user_id,
    room_joint.created_at
   FROM room_joint
  WHERE ((room_joint.user_id = auth.uid()) AND (room_joint.room_id = rooms.id))))));
